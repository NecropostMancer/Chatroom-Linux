// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Chat_2eproto_metadata_getter(int index);
class ChatMessageRequest;
struct ChatMessageRequestDefaultTypeInternal;
extern ChatMessageRequestDefaultTypeInternal _ChatMessageRequest_default_instance_;
class ChatMessageSend;
struct ChatMessageSendDefaultTypeInternal;
extern ChatMessageSendDefaultTypeInternal _ChatMessageSend_default_instance_;
class ChatResponse;
struct ChatResponseDefaultTypeInternal;
extern ChatResponseDefaultTypeInternal _ChatResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatMessageRequest* Arena::CreateMaybeMessage<::ChatMessageRequest>(Arena*);
template<> ::ChatMessageSend* Arena::CreateMaybeMessage<::ChatMessageSend>(Arena*);
template<> ::ChatResponse* Arena::CreateMaybeMessage<::ChatResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChatMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageRequest) */ {
 public:
  inline ChatMessageRequest() : ChatMessageRequest(nullptr) {}
  virtual ~ChatMessageRequest();
  explicit constexpr ChatMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageRequest(const ChatMessageRequest& from);
  ChatMessageRequest(ChatMessageRequest&& from) noexcept
    : ChatMessageRequest() {
    *this = ::std::move(from);
  }

  inline ChatMessageRequest& operator=(const ChatMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageRequest& operator=(ChatMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ChatMessageRequest*>(
               &_ChatMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessageRequest& a, ChatMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageRequest* New() const final {
    return CreateMaybeMessage<ChatMessageRequest>(nullptr);
  }

  ChatMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessageRequest& from);
  void MergeFrom(const ChatMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageRequest";
  }
  protected:
  explicit ChatMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Chat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kTokenFieldNumber = 2,
    kMsgFieldNumber = 3,
    kRandomFieldNumber = 5,
    kRoomidFieldNumber = 4,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string random = 5;
  void clear_random();
  const std::string& random() const;
  void set_random(const std::string& value);
  void set_random(std::string&& value);
  void set_random(const char* value);
  void set_random(const char* value, size_t size);
  std::string* mutable_random();
  std::string* release_random();
  void set_allocated_random(std::string* random);
  private:
  const std::string& _internal_random() const;
  void _internal_set_random(const std::string& value);
  std::string* _internal_mutable_random();
  public:

  // int32 roomid = 4;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageSend) */ {
 public:
  inline ChatMessageSend() : ChatMessageSend(nullptr) {}
  virtual ~ChatMessageSend();
  explicit constexpr ChatMessageSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageSend(const ChatMessageSend& from);
  ChatMessageSend(ChatMessageSend&& from) noexcept
    : ChatMessageSend() {
    *this = ::std::move(from);
  }

  inline ChatMessageSend& operator=(const ChatMessageSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageSend& operator=(ChatMessageSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessageSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageSend* internal_default_instance() {
    return reinterpret_cast<const ChatMessageSend*>(
               &_ChatMessageSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatMessageSend& a, ChatMessageSend& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageSend* New() const final {
    return CreateMaybeMessage<ChatMessageSend>(nullptr);
  }

  ChatMessageSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessageSend& from);
  void MergeFrom(const ChatMessageSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageSend";
  }
  protected:
  explicit ChatMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Chat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kMsgFieldNumber = 2,
    kShownameFieldNumber = 5,
    kRoomidFieldNumber = 3,
    kRoomorderFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string showname = 5;
  void clear_showname();
  const std::string& showname() const;
  void set_showname(const std::string& value);
  void set_showname(std::string&& value);
  void set_showname(const char* value);
  void set_showname(const char* value, size_t size);
  std::string* mutable_showname();
  std::string* release_showname();
  void set_allocated_showname(std::string* showname);
  private:
  const std::string& _internal_showname() const;
  void _internal_set_showname(const std::string& value);
  std::string* _internal_mutable_showname();
  public:

  // int32 roomid = 3;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomorder = 4;
  void clear_roomorder();
  ::PROTOBUF_NAMESPACE_ID::int32 roomorder() const;
  void set_roomorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomorder() const;
  void _internal_set_roomorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 6;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showname_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatResponse) */ {
 public:
  inline ChatResponse() : ChatResponse(nullptr) {}
  virtual ~ChatResponse();
  explicit constexpr ChatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatResponse(const ChatResponse& from);
  ChatResponse(ChatResponse&& from) noexcept
    : ChatResponse() {
    *this = ::std::move(from);
  }

  inline ChatResponse& operator=(const ChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatResponse& operator=(ChatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatResponse* internal_default_instance() {
    return reinterpret_cast<const ChatResponse*>(
               &_ChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatResponse& a, ChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatResponse* New() const final {
    return CreateMaybeMessage<ChatResponse>(nullptr);
  }

  ChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatResponse& from);
  void MergeFrom(const ChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatResponse";
  }
  protected:
  explicit ChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Chat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Error& error() const;
  ::Error* release_error();
  ::Error* mutable_error();
  void set_allocated_error(::Error* error);
  private:
  const ::Error& _internal_error() const;
  ::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Error* error);
  ::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:ChatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessageRequest

// string username = 1;
inline void ChatMessageRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ChatMessageRequest::username() const {
  // @@protoc_insertion_point(field_get:ChatMessageRequest.username)
  return _internal_username();
}
inline void ChatMessageRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChatMessageRequest.username)
}
inline std::string* ChatMessageRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChatMessageRequest.username)
  return _internal_mutable_username();
}
inline const std::string& ChatMessageRequest::_internal_username() const {
  return username_.Get();
}
inline void ChatMessageRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageRequest.username)
}
inline void ChatMessageRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageRequest.username)
}
inline void ChatMessageRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageRequest.username)
}
inline std::string* ChatMessageRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageRequest::release_username() {
  // @@protoc_insertion_point(field_release:ChatMessageRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageRequest.username)
}

// string token = 2;
inline void ChatMessageRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ChatMessageRequest::token() const {
  // @@protoc_insertion_point(field_get:ChatMessageRequest.token)
  return _internal_token();
}
inline void ChatMessageRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ChatMessageRequest.token)
}
inline std::string* ChatMessageRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ChatMessageRequest.token)
  return _internal_mutable_token();
}
inline const std::string& ChatMessageRequest::_internal_token() const {
  return token_.Get();
}
inline void ChatMessageRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageRequest.token)
}
inline void ChatMessageRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageRequest.token)
}
inline void ChatMessageRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageRequest.token)
}
inline std::string* ChatMessageRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageRequest::release_token() {
  // @@protoc_insertion_point(field_release:ChatMessageRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageRequest.token)
}

// string msg = 3;
inline void ChatMessageRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ChatMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:ChatMessageRequest.msg)
  return _internal_msg();
}
inline void ChatMessageRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ChatMessageRequest.msg)
}
inline std::string* ChatMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& ChatMessageRequest::_internal_msg() const {
  return msg_.Get();
}
inline void ChatMessageRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageRequest::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageRequest.msg)
}
inline void ChatMessageRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageRequest.msg)
}
inline void ChatMessageRequest::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageRequest.msg)
}
inline std::string* ChatMessageRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ChatMessageRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageRequest.msg)
}

// int32 roomid = 4;
inline void ChatMessageRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageRequest::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageRequest::roomid() const {
  // @@protoc_insertion_point(field_get:ChatMessageRequest.roomid)
  return _internal_roomid();
}
inline void ChatMessageRequest::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void ChatMessageRequest::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:ChatMessageRequest.roomid)
}

// string random = 5;
inline void ChatMessageRequest::clear_random() {
  random_.ClearToEmpty();
}
inline const std::string& ChatMessageRequest::random() const {
  // @@protoc_insertion_point(field_get:ChatMessageRequest.random)
  return _internal_random();
}
inline void ChatMessageRequest::set_random(const std::string& value) {
  _internal_set_random(value);
  // @@protoc_insertion_point(field_set:ChatMessageRequest.random)
}
inline std::string* ChatMessageRequest::mutable_random() {
  // @@protoc_insertion_point(field_mutable:ChatMessageRequest.random)
  return _internal_mutable_random();
}
inline const std::string& ChatMessageRequest::_internal_random() const {
  return random_.Get();
}
inline void ChatMessageRequest::_internal_set_random(const std::string& value) {
  
  random_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageRequest::set_random(std::string&& value) {
  
  random_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageRequest.random)
}
inline void ChatMessageRequest::set_random(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  random_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageRequest.random)
}
inline void ChatMessageRequest::set_random(const char* value,
    size_t size) {
  
  random_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageRequest.random)
}
inline std::string* ChatMessageRequest::_internal_mutable_random() {
  
  return random_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageRequest::release_random() {
  // @@protoc_insertion_point(field_release:ChatMessageRequest.random)
  return random_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageRequest::set_allocated_random(std::string* random) {
  if (random != nullptr) {
    
  } else {
    
  }
  random_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageRequest.random)
}

// -------------------------------------------------------------------

// ChatMessageSend

// string username = 1;
inline void ChatMessageSend::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::username() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.username)
  return _internal_username();
}
inline void ChatMessageSend::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.username)
}
inline std::string* ChatMessageSend::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChatMessageSend.username)
  return _internal_mutable_username();
}
inline const std::string& ChatMessageSend::_internal_username() const {
  return username_.Get();
}
inline void ChatMessageSend::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageSend::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageSend.username)
}
inline void ChatMessageSend::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageSend.username)
}
inline void ChatMessageSend::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageSend.username)
}
inline std::string* ChatMessageSend::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageSend::release_username() {
  // @@protoc_insertion_point(field_release:ChatMessageSend.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageSend::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageSend.username)
}

// string msg = 2;
inline void ChatMessageSend::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::msg() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.msg)
  return _internal_msg();
}
inline void ChatMessageSend::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.msg)
}
inline std::string* ChatMessageSend::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageSend.msg)
  return _internal_mutable_msg();
}
inline const std::string& ChatMessageSend::_internal_msg() const {
  return msg_.Get();
}
inline void ChatMessageSend::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageSend::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageSend.msg)
}
inline void ChatMessageSend::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageSend.msg)
}
inline void ChatMessageSend::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageSend.msg)
}
inline std::string* ChatMessageSend::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageSend::release_msg() {
  // @@protoc_insertion_point(field_release:ChatMessageSend.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageSend::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageSend.msg)
}

// int32 roomid = 3;
inline void ChatMessageSend::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::roomid() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.roomid)
  return _internal_roomid();
}
inline void ChatMessageSend::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void ChatMessageSend::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.roomid)
}

// int32 roomorder = 4;
inline void ChatMessageSend::clear_roomorder() {
  roomorder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::_internal_roomorder() const {
  return roomorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::roomorder() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.roomorder)
  return _internal_roomorder();
}
inline void ChatMessageSend::_internal_set_roomorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomorder_ = value;
}
inline void ChatMessageSend::set_roomorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomorder(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.roomorder)
}

// string showname = 5;
inline void ChatMessageSend::clear_showname() {
  showname_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::showname() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.showname)
  return _internal_showname();
}
inline void ChatMessageSend::set_showname(const std::string& value) {
  _internal_set_showname(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.showname)
}
inline std::string* ChatMessageSend::mutable_showname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageSend.showname)
  return _internal_mutable_showname();
}
inline const std::string& ChatMessageSend::_internal_showname() const {
  return showname_.Get();
}
inline void ChatMessageSend::_internal_set_showname(const std::string& value) {
  
  showname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessageSend::set_showname(std::string&& value) {
  
  showname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageSend.showname)
}
inline void ChatMessageSend::set_showname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  showname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChatMessageSend.showname)
}
inline void ChatMessageSend::set_showname(const char* value,
    size_t size) {
  
  showname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChatMessageSend.showname)
}
inline std::string* ChatMessageSend::_internal_mutable_showname() {
  
  return showname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessageSend::release_showname() {
  // @@protoc_insertion_point(field_release:ChatMessageSend.showname)
  return showname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessageSend::set_allocated_showname(std::string* showname) {
  if (showname != nullptr) {
    
  } else {
    
  }
  showname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), showname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChatMessageSend.showname)
}

// int32 type = 6;
inline void ChatMessageSend::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessageSend::type() const {
  // @@protoc_insertion_point(field_get:ChatMessageSend.type)
  return _internal_type();
}
inline void ChatMessageSend::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ChatMessageSend::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChatMessageSend.type)
}

// -------------------------------------------------------------------

// ChatResponse

// .Error error = 1;
inline bool ChatResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ChatResponse::has_error() const {
  return _internal_has_error();
}
inline const ::Error& ChatResponse::_internal_error() const {
  const ::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Error&>(
      ::_Error_default_instance_);
}
inline const ::Error& ChatResponse::error() const {
  // @@protoc_insertion_point(field_get:ChatResponse.error)
  return _internal_error();
}
inline void ChatResponse::unsafe_arena_set_allocated_error(
    ::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatResponse.error)
}
inline ::Error* ChatResponse::release_error() {
  
  ::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Error* ChatResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:ChatResponse.error)
  
  ::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::Error* ChatResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::Error* ChatResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:ChatResponse.error)
  return _internal_mutable_error();
}
inline void ChatResponse::set_allocated_error(::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:ChatResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
