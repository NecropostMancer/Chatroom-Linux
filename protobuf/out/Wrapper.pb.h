// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wrapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Error.pb.h"
#include "Room.pb.h"
#include "Chat.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Wrapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Wrapper_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wrapper_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Wrapper_2eproto_metadata_getter(int index);
class WrapperClientMessage;
struct WrapperClientMessageDefaultTypeInternal;
extern WrapperClientMessageDefaultTypeInternal _WrapperClientMessage_default_instance_;
class WrapperServerMessage;
struct WrapperServerMessageDefaultTypeInternal;
extern WrapperServerMessageDefaultTypeInternal _WrapperServerMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::WrapperClientMessage* Arena::CreateMaybeMessage<::WrapperClientMessage>(Arena*);
template<> ::WrapperServerMessage* Arena::CreateMaybeMessage<::WrapperServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WrapperClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WrapperClientMessage) */ {
 public:
  inline WrapperClientMessage() : WrapperClientMessage(nullptr) {}
  virtual ~WrapperClientMessage();
  explicit constexpr WrapperClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrapperClientMessage(const WrapperClientMessage& from);
  WrapperClientMessage(WrapperClientMessage&& from) noexcept
    : WrapperClientMessage() {
    *this = ::std::move(from);
  }

  inline WrapperClientMessage& operator=(const WrapperClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperClientMessage& operator=(WrapperClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperClientMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kChatMessageRequest = 2,
    kError = 3,
    kLoginRequest = 4,
    kRegisterRequest = 5,
    kChangeNameRequest = 6,
    kRoomRequest = 7,
    kRoomControl = 8,
    MSG_NOT_SET = 0,
  };

  static inline const WrapperClientMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperClientMessage*>(
               &_WrapperClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrapperClientMessage& a, WrapperClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperClientMessage* New() const final {
    return CreateMaybeMessage<WrapperClientMessage>(nullptr);
  }

  WrapperClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperClientMessage& from);
  void MergeFrom(const WrapperClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WrapperClientMessage";
  }
  protected:
  explicit WrapperClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Wrapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
    kChatMessageRequestFieldNumber = 2,
    kErrorFieldNumber = 3,
    kLoginRequestFieldNumber = 4,
    kRegisterRequestFieldNumber = 5,
    kChangeNameRequestFieldNumber = 6,
    kRoomRequestFieldNumber = 7,
    kRoomControlFieldNumber = 8,
  };
  // int32 test = 1;
  void clear_test();
  ::PROTOBUF_NAMESPACE_ID::int32 test() const;
  void set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test() const;
  void _internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ChatMessageRequest chatMessageRequest = 2;
  bool has_chatmessagerequest() const;
  private:
  bool _internal_has_chatmessagerequest() const;
  public:
  void clear_chatmessagerequest();
  const ::ChatMessageRequest& chatmessagerequest() const;
  ::ChatMessageRequest* release_chatmessagerequest();
  ::ChatMessageRequest* mutable_chatmessagerequest();
  void set_allocated_chatmessagerequest(::ChatMessageRequest* chatmessagerequest);
  private:
  const ::ChatMessageRequest& _internal_chatmessagerequest() const;
  ::ChatMessageRequest* _internal_mutable_chatmessagerequest();
  public:
  void unsafe_arena_set_allocated_chatmessagerequest(
      ::ChatMessageRequest* chatmessagerequest);
  ::ChatMessageRequest* unsafe_arena_release_chatmessagerequest();

  // .Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Error& error() const;
  ::Error* release_error();
  ::Error* mutable_error();
  void set_allocated_error(::Error* error);
  private:
  const ::Error& _internal_error() const;
  ::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Error* error);
  ::Error* unsafe_arena_release_error();

  // .LoginRequest loginRequest = 4;
  bool has_loginrequest() const;
  private:
  bool _internal_has_loginrequest() const;
  public:
  void clear_loginrequest();
  const ::LoginRequest& loginrequest() const;
  ::LoginRequest* release_loginrequest();
  ::LoginRequest* mutable_loginrequest();
  void set_allocated_loginrequest(::LoginRequest* loginrequest);
  private:
  const ::LoginRequest& _internal_loginrequest() const;
  ::LoginRequest* _internal_mutable_loginrequest();
  public:
  void unsafe_arena_set_allocated_loginrequest(
      ::LoginRequest* loginrequest);
  ::LoginRequest* unsafe_arena_release_loginrequest();

  // .RegisterRequest registerRequest = 5;
  bool has_registerrequest() const;
  private:
  bool _internal_has_registerrequest() const;
  public:
  void clear_registerrequest();
  const ::RegisterRequest& registerrequest() const;
  ::RegisterRequest* release_registerrequest();
  ::RegisterRequest* mutable_registerrequest();
  void set_allocated_registerrequest(::RegisterRequest* registerrequest);
  private:
  const ::RegisterRequest& _internal_registerrequest() const;
  ::RegisterRequest* _internal_mutable_registerrequest();
  public:
  void unsafe_arena_set_allocated_registerrequest(
      ::RegisterRequest* registerrequest);
  ::RegisterRequest* unsafe_arena_release_registerrequest();

  // .ChangeNameRequest changeNameRequest = 6;
  bool has_changenamerequest() const;
  private:
  bool _internal_has_changenamerequest() const;
  public:
  void clear_changenamerequest();
  const ::ChangeNameRequest& changenamerequest() const;
  ::ChangeNameRequest* release_changenamerequest();
  ::ChangeNameRequest* mutable_changenamerequest();
  void set_allocated_changenamerequest(::ChangeNameRequest* changenamerequest);
  private:
  const ::ChangeNameRequest& _internal_changenamerequest() const;
  ::ChangeNameRequest* _internal_mutable_changenamerequest();
  public:
  void unsafe_arena_set_allocated_changenamerequest(
      ::ChangeNameRequest* changenamerequest);
  ::ChangeNameRequest* unsafe_arena_release_changenamerequest();

  // .RoomRequest roomRequest = 7;
  bool has_roomrequest() const;
  private:
  bool _internal_has_roomrequest() const;
  public:
  void clear_roomrequest();
  const ::RoomRequest& roomrequest() const;
  ::RoomRequest* release_roomrequest();
  ::RoomRequest* mutable_roomrequest();
  void set_allocated_roomrequest(::RoomRequest* roomrequest);
  private:
  const ::RoomRequest& _internal_roomrequest() const;
  ::RoomRequest* _internal_mutable_roomrequest();
  public:
  void unsafe_arena_set_allocated_roomrequest(
      ::RoomRequest* roomrequest);
  ::RoomRequest* unsafe_arena_release_roomrequest();

  // .RoomControl roomControl = 8;
  bool has_roomcontrol() const;
  private:
  bool _internal_has_roomcontrol() const;
  public:
  void clear_roomcontrol();
  const ::RoomControl& roomcontrol() const;
  ::RoomControl* release_roomcontrol();
  ::RoomControl* mutable_roomcontrol();
  void set_allocated_roomcontrol(::RoomControl* roomcontrol);
  private:
  const ::RoomControl& _internal_roomcontrol() const;
  ::RoomControl* _internal_mutable_roomcontrol();
  public:
  void unsafe_arena_set_allocated_roomcontrol(
      ::RoomControl* roomcontrol);
  ::RoomControl* unsafe_arena_release_roomcontrol();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:WrapperClientMessage)
 private:
  class _Internal;
  void set_has_chatmessagerequest();
  void set_has_error();
  void set_has_loginrequest();
  void set_has_registerrequest();
  void set_has_changenamerequest();
  void set_has_roomrequest();
  void set_has_roomcontrol();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ChatMessageRequest* chatmessagerequest_;
    ::Error* error_;
    ::LoginRequest* loginrequest_;
    ::RegisterRequest* registerrequest_;
    ::ChangeNameRequest* changenamerequest_;
    ::RoomRequest* roomrequest_;
    ::RoomControl* roomcontrol_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Wrapper_2eproto;
};
// -------------------------------------------------------------------

class WrapperServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WrapperServerMessage) */ {
 public:
  inline WrapperServerMessage() : WrapperServerMessage(nullptr) {}
  virtual ~WrapperServerMessage();
  explicit constexpr WrapperServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrapperServerMessage(const WrapperServerMessage& from);
  WrapperServerMessage(WrapperServerMessage&& from) noexcept
    : WrapperServerMessage() {
    *this = ::std::move(from);
  }

  inline WrapperServerMessage& operator=(const WrapperServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperServerMessage& operator=(WrapperServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperServerMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kRoomResponse = 2,
    kError = 3,
    kChatMessageSend = 4,
    kChatResponse = 5,
    kLoginResponse = 6,
    kRegularResponse = 7,
    MSG_NOT_SET = 0,
  };

  static inline const WrapperServerMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperServerMessage*>(
               &_WrapperServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WrapperServerMessage& a, WrapperServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperServerMessage* New() const final {
    return CreateMaybeMessage<WrapperServerMessage>(nullptr);
  }

  WrapperServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperServerMessage& from);
  void MergeFrom(const WrapperServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WrapperServerMessage";
  }
  protected:
  explicit WrapperServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Wrapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 8,
    kTestFieldNumber = 1,
    kRoomResponseFieldNumber = 2,
    kErrorFieldNumber = 3,
    kChatMessageSendFieldNumber = 4,
    kChatResponseFieldNumber = 5,
    kLoginResponseFieldNumber = 6,
    kRegularResponseFieldNumber = 7,
  };
  // repeated .RoomResponse rooms = 8;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::RoomResponse* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomResponse >*
      mutable_rooms();
  private:
  const ::RoomResponse& _internal_rooms(int index) const;
  ::RoomResponse* _internal_add_rooms();
  public:
  const ::RoomResponse& rooms(int index) const;
  ::RoomResponse* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomResponse >&
      rooms() const;

  // int32 test = 1;
  void clear_test();
  ::PROTOBUF_NAMESPACE_ID::int32 test() const;
  void set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test() const;
  void _internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .RoomResponse roomResponse = 2;
  bool has_roomresponse() const;
  private:
  bool _internal_has_roomresponse() const;
  public:
  void clear_roomresponse();
  const ::RoomResponse& roomresponse() const;
  ::RoomResponse* release_roomresponse();
  ::RoomResponse* mutable_roomresponse();
  void set_allocated_roomresponse(::RoomResponse* roomresponse);
  private:
  const ::RoomResponse& _internal_roomresponse() const;
  ::RoomResponse* _internal_mutable_roomresponse();
  public:
  void unsafe_arena_set_allocated_roomresponse(
      ::RoomResponse* roomresponse);
  ::RoomResponse* unsafe_arena_release_roomresponse();

  // .Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Error& error() const;
  ::Error* release_error();
  ::Error* mutable_error();
  void set_allocated_error(::Error* error);
  private:
  const ::Error& _internal_error() const;
  ::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Error* error);
  ::Error* unsafe_arena_release_error();

  // .ChatMessageSend chatMessageSend = 4;
  bool has_chatmessagesend() const;
  private:
  bool _internal_has_chatmessagesend() const;
  public:
  void clear_chatmessagesend();
  const ::ChatMessageSend& chatmessagesend() const;
  ::ChatMessageSend* release_chatmessagesend();
  ::ChatMessageSend* mutable_chatmessagesend();
  void set_allocated_chatmessagesend(::ChatMessageSend* chatmessagesend);
  private:
  const ::ChatMessageSend& _internal_chatmessagesend() const;
  ::ChatMessageSend* _internal_mutable_chatmessagesend();
  public:
  void unsafe_arena_set_allocated_chatmessagesend(
      ::ChatMessageSend* chatmessagesend);
  ::ChatMessageSend* unsafe_arena_release_chatmessagesend();

  // .ChatResponse chatResponse = 5;
  bool has_chatresponse() const;
  private:
  bool _internal_has_chatresponse() const;
  public:
  void clear_chatresponse();
  const ::ChatResponse& chatresponse() const;
  ::ChatResponse* release_chatresponse();
  ::ChatResponse* mutable_chatresponse();
  void set_allocated_chatresponse(::ChatResponse* chatresponse);
  private:
  const ::ChatResponse& _internal_chatresponse() const;
  ::ChatResponse* _internal_mutable_chatresponse();
  public:
  void unsafe_arena_set_allocated_chatresponse(
      ::ChatResponse* chatresponse);
  ::ChatResponse* unsafe_arena_release_chatresponse();

  // .LoginResponse loginResponse = 6;
  bool has_loginresponse() const;
  private:
  bool _internal_has_loginresponse() const;
  public:
  void clear_loginresponse();
  const ::LoginResponse& loginresponse() const;
  ::LoginResponse* release_loginresponse();
  ::LoginResponse* mutable_loginresponse();
  void set_allocated_loginresponse(::LoginResponse* loginresponse);
  private:
  const ::LoginResponse& _internal_loginresponse() const;
  ::LoginResponse* _internal_mutable_loginresponse();
  public:
  void unsafe_arena_set_allocated_loginresponse(
      ::LoginResponse* loginresponse);
  ::LoginResponse* unsafe_arena_release_loginresponse();

  // .RegularResponse regularResponse = 7;
  bool has_regularresponse() const;
  private:
  bool _internal_has_regularresponse() const;
  public:
  void clear_regularresponse();
  const ::RegularResponse& regularresponse() const;
  ::RegularResponse* release_regularresponse();
  ::RegularResponse* mutable_regularresponse();
  void set_allocated_regularresponse(::RegularResponse* regularresponse);
  private:
  const ::RegularResponse& _internal_regularresponse() const;
  ::RegularResponse* _internal_mutable_regularresponse();
  public:
  void unsafe_arena_set_allocated_regularresponse(
      ::RegularResponse* regularresponse);
  ::RegularResponse* unsafe_arena_release_regularresponse();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:WrapperServerMessage)
 private:
  class _Internal;
  void set_has_roomresponse();
  void set_has_error();
  void set_has_chatmessagesend();
  void set_has_chatresponse();
  void set_has_loginresponse();
  void set_has_regularresponse();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomResponse > rooms_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::RoomResponse* roomresponse_;
    ::Error* error_;
    ::ChatMessageSend* chatmessagesend_;
    ::ChatResponse* chatresponse_;
    ::LoginResponse* loginresponse_;
    ::RegularResponse* regularresponse_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Wrapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrapperClientMessage

// int32 test = 1;
inline void WrapperClientMessage::clear_test() {
  test_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WrapperClientMessage::_internal_test() const {
  return test_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WrapperClientMessage::test() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.test)
  return _internal_test();
}
inline void WrapperClientMessage::_internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_ = value;
}
inline void WrapperClientMessage::set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test(value);
  // @@protoc_insertion_point(field_set:WrapperClientMessage.test)
}

// .ChatMessageRequest chatMessageRequest = 2;
inline bool WrapperClientMessage::_internal_has_chatmessagerequest() const {
  return msg_case() == kChatMessageRequest;
}
inline bool WrapperClientMessage::has_chatmessagerequest() const {
  return _internal_has_chatmessagerequest();
}
inline void WrapperClientMessage::set_has_chatmessagerequest() {
  _oneof_case_[0] = kChatMessageRequest;
}
inline ::ChatMessageRequest* WrapperClientMessage::release_chatmessagerequest() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.chatMessageRequest)
  if (_internal_has_chatmessagerequest()) {
    clear_has_msg();
      ::ChatMessageRequest* temp = msg_.chatmessagerequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.chatmessagerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatMessageRequest& WrapperClientMessage::_internal_chatmessagerequest() const {
  return _internal_has_chatmessagerequest()
      ? *msg_.chatmessagerequest_
      : reinterpret_cast< ::ChatMessageRequest&>(::_ChatMessageRequest_default_instance_);
}
inline const ::ChatMessageRequest& WrapperClientMessage::chatmessagerequest() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.chatMessageRequest)
  return _internal_chatmessagerequest();
}
inline ::ChatMessageRequest* WrapperClientMessage::unsafe_arena_release_chatmessagerequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.chatMessageRequest)
  if (_internal_has_chatmessagerequest()) {
    clear_has_msg();
    ::ChatMessageRequest* temp = msg_.chatmessagerequest_;
    msg_.chatmessagerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_chatmessagerequest(::ChatMessageRequest* chatmessagerequest) {
  clear_msg();
  if (chatmessagerequest) {
    set_has_chatmessagerequest();
    msg_.chatmessagerequest_ = chatmessagerequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.chatMessageRequest)
}
inline ::ChatMessageRequest* WrapperClientMessage::_internal_mutable_chatmessagerequest() {
  if (!_internal_has_chatmessagerequest()) {
    clear_msg();
    set_has_chatmessagerequest();
    msg_.chatmessagerequest_ = CreateMaybeMessage< ::ChatMessageRequest >(GetArena());
  }
  return msg_.chatmessagerequest_;
}
inline ::ChatMessageRequest* WrapperClientMessage::mutable_chatmessagerequest() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.chatMessageRequest)
  return _internal_mutable_chatmessagerequest();
}

// .Error error = 3;
inline bool WrapperClientMessage::_internal_has_error() const {
  return msg_case() == kError;
}
inline bool WrapperClientMessage::has_error() const {
  return _internal_has_error();
}
inline void WrapperClientMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::Error* WrapperClientMessage::release_error() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
      ::Error* temp = msg_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Error& WrapperClientMessage::_internal_error() const {
  return _internal_has_error()
      ? *msg_.error_
      : reinterpret_cast< ::Error&>(::_Error_default_instance_);
}
inline const ::Error& WrapperClientMessage::error() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.error)
  return _internal_error();
}
inline ::Error* WrapperClientMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::Error* temp = msg_.error_;
    msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_error(::Error* error) {
  clear_msg();
  if (error) {
    set_has_error();
    msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.error)
}
inline ::Error* WrapperClientMessage::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_msg();
    set_has_error();
    msg_.error_ = CreateMaybeMessage< ::Error >(GetArena());
  }
  return msg_.error_;
}
inline ::Error* WrapperClientMessage::mutable_error() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.error)
  return _internal_mutable_error();
}

// .LoginRequest loginRequest = 4;
inline bool WrapperClientMessage::_internal_has_loginrequest() const {
  return msg_case() == kLoginRequest;
}
inline bool WrapperClientMessage::has_loginrequest() const {
  return _internal_has_loginrequest();
}
inline void WrapperClientMessage::set_has_loginrequest() {
  _oneof_case_[0] = kLoginRequest;
}
inline ::LoginRequest* WrapperClientMessage::release_loginrequest() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.loginRequest)
  if (_internal_has_loginrequest()) {
    clear_has_msg();
      ::LoginRequest* temp = msg_.loginrequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.loginrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& WrapperClientMessage::_internal_loginrequest() const {
  return _internal_has_loginrequest()
      ? *msg_.loginrequest_
      : reinterpret_cast< ::LoginRequest&>(::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& WrapperClientMessage::loginrequest() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.loginRequest)
  return _internal_loginrequest();
}
inline ::LoginRequest* WrapperClientMessage::unsafe_arena_release_loginrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.loginRequest)
  if (_internal_has_loginrequest()) {
    clear_has_msg();
    ::LoginRequest* temp = msg_.loginrequest_;
    msg_.loginrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_loginrequest(::LoginRequest* loginrequest) {
  clear_msg();
  if (loginrequest) {
    set_has_loginrequest();
    msg_.loginrequest_ = loginrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.loginRequest)
}
inline ::LoginRequest* WrapperClientMessage::_internal_mutable_loginrequest() {
  if (!_internal_has_loginrequest()) {
    clear_msg();
    set_has_loginrequest();
    msg_.loginrequest_ = CreateMaybeMessage< ::LoginRequest >(GetArena());
  }
  return msg_.loginrequest_;
}
inline ::LoginRequest* WrapperClientMessage::mutable_loginrequest() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.loginRequest)
  return _internal_mutable_loginrequest();
}

// .RegisterRequest registerRequest = 5;
inline bool WrapperClientMessage::_internal_has_registerrequest() const {
  return msg_case() == kRegisterRequest;
}
inline bool WrapperClientMessage::has_registerrequest() const {
  return _internal_has_registerrequest();
}
inline void WrapperClientMessage::set_has_registerrequest() {
  _oneof_case_[0] = kRegisterRequest;
}
inline ::RegisterRequest* WrapperClientMessage::release_registerrequest() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.registerRequest)
  if (_internal_has_registerrequest()) {
    clear_has_msg();
      ::RegisterRequest* temp = msg_.registerrequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.registerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterRequest& WrapperClientMessage::_internal_registerrequest() const {
  return _internal_has_registerrequest()
      ? *msg_.registerrequest_
      : reinterpret_cast< ::RegisterRequest&>(::_RegisterRequest_default_instance_);
}
inline const ::RegisterRequest& WrapperClientMessage::registerrequest() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.registerRequest)
  return _internal_registerrequest();
}
inline ::RegisterRequest* WrapperClientMessage::unsafe_arena_release_registerrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.registerRequest)
  if (_internal_has_registerrequest()) {
    clear_has_msg();
    ::RegisterRequest* temp = msg_.registerrequest_;
    msg_.registerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_registerrequest(::RegisterRequest* registerrequest) {
  clear_msg();
  if (registerrequest) {
    set_has_registerrequest();
    msg_.registerrequest_ = registerrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.registerRequest)
}
inline ::RegisterRequest* WrapperClientMessage::_internal_mutable_registerrequest() {
  if (!_internal_has_registerrequest()) {
    clear_msg();
    set_has_registerrequest();
    msg_.registerrequest_ = CreateMaybeMessage< ::RegisterRequest >(GetArena());
  }
  return msg_.registerrequest_;
}
inline ::RegisterRequest* WrapperClientMessage::mutable_registerrequest() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.registerRequest)
  return _internal_mutable_registerrequest();
}

// .ChangeNameRequest changeNameRequest = 6;
inline bool WrapperClientMessage::_internal_has_changenamerequest() const {
  return msg_case() == kChangeNameRequest;
}
inline bool WrapperClientMessage::has_changenamerequest() const {
  return _internal_has_changenamerequest();
}
inline void WrapperClientMessage::set_has_changenamerequest() {
  _oneof_case_[0] = kChangeNameRequest;
}
inline ::ChangeNameRequest* WrapperClientMessage::release_changenamerequest() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.changeNameRequest)
  if (_internal_has_changenamerequest()) {
    clear_has_msg();
      ::ChangeNameRequest* temp = msg_.changenamerequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.changenamerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChangeNameRequest& WrapperClientMessage::_internal_changenamerequest() const {
  return _internal_has_changenamerequest()
      ? *msg_.changenamerequest_
      : reinterpret_cast< ::ChangeNameRequest&>(::_ChangeNameRequest_default_instance_);
}
inline const ::ChangeNameRequest& WrapperClientMessage::changenamerequest() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.changeNameRequest)
  return _internal_changenamerequest();
}
inline ::ChangeNameRequest* WrapperClientMessage::unsafe_arena_release_changenamerequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.changeNameRequest)
  if (_internal_has_changenamerequest()) {
    clear_has_msg();
    ::ChangeNameRequest* temp = msg_.changenamerequest_;
    msg_.changenamerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_changenamerequest(::ChangeNameRequest* changenamerequest) {
  clear_msg();
  if (changenamerequest) {
    set_has_changenamerequest();
    msg_.changenamerequest_ = changenamerequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.changeNameRequest)
}
inline ::ChangeNameRequest* WrapperClientMessage::_internal_mutable_changenamerequest() {
  if (!_internal_has_changenamerequest()) {
    clear_msg();
    set_has_changenamerequest();
    msg_.changenamerequest_ = CreateMaybeMessage< ::ChangeNameRequest >(GetArena());
  }
  return msg_.changenamerequest_;
}
inline ::ChangeNameRequest* WrapperClientMessage::mutable_changenamerequest() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.changeNameRequest)
  return _internal_mutable_changenamerequest();
}

// .RoomRequest roomRequest = 7;
inline bool WrapperClientMessage::_internal_has_roomrequest() const {
  return msg_case() == kRoomRequest;
}
inline bool WrapperClientMessage::has_roomrequest() const {
  return _internal_has_roomrequest();
}
inline void WrapperClientMessage::set_has_roomrequest() {
  _oneof_case_[0] = kRoomRequest;
}
inline ::RoomRequest* WrapperClientMessage::release_roomrequest() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.roomRequest)
  if (_internal_has_roomrequest()) {
    clear_has_msg();
      ::RoomRequest* temp = msg_.roomrequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.roomrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RoomRequest& WrapperClientMessage::_internal_roomrequest() const {
  return _internal_has_roomrequest()
      ? *msg_.roomrequest_
      : reinterpret_cast< ::RoomRequest&>(::_RoomRequest_default_instance_);
}
inline const ::RoomRequest& WrapperClientMessage::roomrequest() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.roomRequest)
  return _internal_roomrequest();
}
inline ::RoomRequest* WrapperClientMessage::unsafe_arena_release_roomrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.roomRequest)
  if (_internal_has_roomrequest()) {
    clear_has_msg();
    ::RoomRequest* temp = msg_.roomrequest_;
    msg_.roomrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_roomrequest(::RoomRequest* roomrequest) {
  clear_msg();
  if (roomrequest) {
    set_has_roomrequest();
    msg_.roomrequest_ = roomrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.roomRequest)
}
inline ::RoomRequest* WrapperClientMessage::_internal_mutable_roomrequest() {
  if (!_internal_has_roomrequest()) {
    clear_msg();
    set_has_roomrequest();
    msg_.roomrequest_ = CreateMaybeMessage< ::RoomRequest >(GetArena());
  }
  return msg_.roomrequest_;
}
inline ::RoomRequest* WrapperClientMessage::mutable_roomrequest() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.roomRequest)
  return _internal_mutable_roomrequest();
}

// .RoomControl roomControl = 8;
inline bool WrapperClientMessage::_internal_has_roomcontrol() const {
  return msg_case() == kRoomControl;
}
inline bool WrapperClientMessage::has_roomcontrol() const {
  return _internal_has_roomcontrol();
}
inline void WrapperClientMessage::set_has_roomcontrol() {
  _oneof_case_[0] = kRoomControl;
}
inline ::RoomControl* WrapperClientMessage::release_roomcontrol() {
  // @@protoc_insertion_point(field_release:WrapperClientMessage.roomControl)
  if (_internal_has_roomcontrol()) {
    clear_has_msg();
      ::RoomControl* temp = msg_.roomcontrol_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.roomcontrol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RoomControl& WrapperClientMessage::_internal_roomcontrol() const {
  return _internal_has_roomcontrol()
      ? *msg_.roomcontrol_
      : reinterpret_cast< ::RoomControl&>(::_RoomControl_default_instance_);
}
inline const ::RoomControl& WrapperClientMessage::roomcontrol() const {
  // @@protoc_insertion_point(field_get:WrapperClientMessage.roomControl)
  return _internal_roomcontrol();
}
inline ::RoomControl* WrapperClientMessage::unsafe_arena_release_roomcontrol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperClientMessage.roomControl)
  if (_internal_has_roomcontrol()) {
    clear_has_msg();
    ::RoomControl* temp = msg_.roomcontrol_;
    msg_.roomcontrol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperClientMessage::unsafe_arena_set_allocated_roomcontrol(::RoomControl* roomcontrol) {
  clear_msg();
  if (roomcontrol) {
    set_has_roomcontrol();
    msg_.roomcontrol_ = roomcontrol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperClientMessage.roomControl)
}
inline ::RoomControl* WrapperClientMessage::_internal_mutable_roomcontrol() {
  if (!_internal_has_roomcontrol()) {
    clear_msg();
    set_has_roomcontrol();
    msg_.roomcontrol_ = CreateMaybeMessage< ::RoomControl >(GetArena());
  }
  return msg_.roomcontrol_;
}
inline ::RoomControl* WrapperClientMessage::mutable_roomcontrol() {
  // @@protoc_insertion_point(field_mutable:WrapperClientMessage.roomControl)
  return _internal_mutable_roomcontrol();
}

inline bool WrapperClientMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void WrapperClientMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline WrapperClientMessage::MsgCase WrapperClientMessage::msg_case() const {
  return WrapperClientMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WrapperServerMessage

// int32 test = 1;
inline void WrapperServerMessage::clear_test() {
  test_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WrapperServerMessage::_internal_test() const {
  return test_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WrapperServerMessage::test() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.test)
  return _internal_test();
}
inline void WrapperServerMessage::_internal_set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_ = value;
}
inline void WrapperServerMessage::set_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test(value);
  // @@protoc_insertion_point(field_set:WrapperServerMessage.test)
}

// .RoomResponse roomResponse = 2;
inline bool WrapperServerMessage::_internal_has_roomresponse() const {
  return msg_case() == kRoomResponse;
}
inline bool WrapperServerMessage::has_roomresponse() const {
  return _internal_has_roomresponse();
}
inline void WrapperServerMessage::set_has_roomresponse() {
  _oneof_case_[0] = kRoomResponse;
}
inline ::RoomResponse* WrapperServerMessage::release_roomresponse() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.roomResponse)
  if (_internal_has_roomresponse()) {
    clear_has_msg();
      ::RoomResponse* temp = msg_.roomresponse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.roomresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RoomResponse& WrapperServerMessage::_internal_roomresponse() const {
  return _internal_has_roomresponse()
      ? *msg_.roomresponse_
      : reinterpret_cast< ::RoomResponse&>(::_RoomResponse_default_instance_);
}
inline const ::RoomResponse& WrapperServerMessage::roomresponse() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.roomResponse)
  return _internal_roomresponse();
}
inline ::RoomResponse* WrapperServerMessage::unsafe_arena_release_roomresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.roomResponse)
  if (_internal_has_roomresponse()) {
    clear_has_msg();
    ::RoomResponse* temp = msg_.roomresponse_;
    msg_.roomresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_roomresponse(::RoomResponse* roomresponse) {
  clear_msg();
  if (roomresponse) {
    set_has_roomresponse();
    msg_.roomresponse_ = roomresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.roomResponse)
}
inline ::RoomResponse* WrapperServerMessage::_internal_mutable_roomresponse() {
  if (!_internal_has_roomresponse()) {
    clear_msg();
    set_has_roomresponse();
    msg_.roomresponse_ = CreateMaybeMessage< ::RoomResponse >(GetArena());
  }
  return msg_.roomresponse_;
}
inline ::RoomResponse* WrapperServerMessage::mutable_roomresponse() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.roomResponse)
  return _internal_mutable_roomresponse();
}

// .Error error = 3;
inline bool WrapperServerMessage::_internal_has_error() const {
  return msg_case() == kError;
}
inline bool WrapperServerMessage::has_error() const {
  return _internal_has_error();
}
inline void WrapperServerMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::Error* WrapperServerMessage::release_error() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
      ::Error* temp = msg_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Error& WrapperServerMessage::_internal_error() const {
  return _internal_has_error()
      ? *msg_.error_
      : reinterpret_cast< ::Error&>(::_Error_default_instance_);
}
inline const ::Error& WrapperServerMessage::error() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.error)
  return _internal_error();
}
inline ::Error* WrapperServerMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::Error* temp = msg_.error_;
    msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_error(::Error* error) {
  clear_msg();
  if (error) {
    set_has_error();
    msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.error)
}
inline ::Error* WrapperServerMessage::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_msg();
    set_has_error();
    msg_.error_ = CreateMaybeMessage< ::Error >(GetArena());
  }
  return msg_.error_;
}
inline ::Error* WrapperServerMessage::mutable_error() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.error)
  return _internal_mutable_error();
}

// .ChatMessageSend chatMessageSend = 4;
inline bool WrapperServerMessage::_internal_has_chatmessagesend() const {
  return msg_case() == kChatMessageSend;
}
inline bool WrapperServerMessage::has_chatmessagesend() const {
  return _internal_has_chatmessagesend();
}
inline void WrapperServerMessage::set_has_chatmessagesend() {
  _oneof_case_[0] = kChatMessageSend;
}
inline ::ChatMessageSend* WrapperServerMessage::release_chatmessagesend() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.chatMessageSend)
  if (_internal_has_chatmessagesend()) {
    clear_has_msg();
      ::ChatMessageSend* temp = msg_.chatmessagesend_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.chatmessagesend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatMessageSend& WrapperServerMessage::_internal_chatmessagesend() const {
  return _internal_has_chatmessagesend()
      ? *msg_.chatmessagesend_
      : reinterpret_cast< ::ChatMessageSend&>(::_ChatMessageSend_default_instance_);
}
inline const ::ChatMessageSend& WrapperServerMessage::chatmessagesend() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.chatMessageSend)
  return _internal_chatmessagesend();
}
inline ::ChatMessageSend* WrapperServerMessage::unsafe_arena_release_chatmessagesend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.chatMessageSend)
  if (_internal_has_chatmessagesend()) {
    clear_has_msg();
    ::ChatMessageSend* temp = msg_.chatmessagesend_;
    msg_.chatmessagesend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_chatmessagesend(::ChatMessageSend* chatmessagesend) {
  clear_msg();
  if (chatmessagesend) {
    set_has_chatmessagesend();
    msg_.chatmessagesend_ = chatmessagesend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.chatMessageSend)
}
inline ::ChatMessageSend* WrapperServerMessage::_internal_mutable_chatmessagesend() {
  if (!_internal_has_chatmessagesend()) {
    clear_msg();
    set_has_chatmessagesend();
    msg_.chatmessagesend_ = CreateMaybeMessage< ::ChatMessageSend >(GetArena());
  }
  return msg_.chatmessagesend_;
}
inline ::ChatMessageSend* WrapperServerMessage::mutable_chatmessagesend() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.chatMessageSend)
  return _internal_mutable_chatmessagesend();
}

// .ChatResponse chatResponse = 5;
inline bool WrapperServerMessage::_internal_has_chatresponse() const {
  return msg_case() == kChatResponse;
}
inline bool WrapperServerMessage::has_chatresponse() const {
  return _internal_has_chatresponse();
}
inline void WrapperServerMessage::set_has_chatresponse() {
  _oneof_case_[0] = kChatResponse;
}
inline ::ChatResponse* WrapperServerMessage::release_chatresponse() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.chatResponse)
  if (_internal_has_chatresponse()) {
    clear_has_msg();
      ::ChatResponse* temp = msg_.chatresponse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.chatresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChatResponse& WrapperServerMessage::_internal_chatresponse() const {
  return _internal_has_chatresponse()
      ? *msg_.chatresponse_
      : reinterpret_cast< ::ChatResponse&>(::_ChatResponse_default_instance_);
}
inline const ::ChatResponse& WrapperServerMessage::chatresponse() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.chatResponse)
  return _internal_chatresponse();
}
inline ::ChatResponse* WrapperServerMessage::unsafe_arena_release_chatresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.chatResponse)
  if (_internal_has_chatresponse()) {
    clear_has_msg();
    ::ChatResponse* temp = msg_.chatresponse_;
    msg_.chatresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_chatresponse(::ChatResponse* chatresponse) {
  clear_msg();
  if (chatresponse) {
    set_has_chatresponse();
    msg_.chatresponse_ = chatresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.chatResponse)
}
inline ::ChatResponse* WrapperServerMessage::_internal_mutable_chatresponse() {
  if (!_internal_has_chatresponse()) {
    clear_msg();
    set_has_chatresponse();
    msg_.chatresponse_ = CreateMaybeMessage< ::ChatResponse >(GetArena());
  }
  return msg_.chatresponse_;
}
inline ::ChatResponse* WrapperServerMessage::mutable_chatresponse() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.chatResponse)
  return _internal_mutable_chatresponse();
}

// .LoginResponse loginResponse = 6;
inline bool WrapperServerMessage::_internal_has_loginresponse() const {
  return msg_case() == kLoginResponse;
}
inline bool WrapperServerMessage::has_loginresponse() const {
  return _internal_has_loginresponse();
}
inline void WrapperServerMessage::set_has_loginresponse() {
  _oneof_case_[0] = kLoginResponse;
}
inline ::LoginResponse* WrapperServerMessage::release_loginresponse() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.loginResponse)
  if (_internal_has_loginresponse()) {
    clear_has_msg();
      ::LoginResponse* temp = msg_.loginresponse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.loginresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginResponse& WrapperServerMessage::_internal_loginresponse() const {
  return _internal_has_loginresponse()
      ? *msg_.loginresponse_
      : reinterpret_cast< ::LoginResponse&>(::_LoginResponse_default_instance_);
}
inline const ::LoginResponse& WrapperServerMessage::loginresponse() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.loginResponse)
  return _internal_loginresponse();
}
inline ::LoginResponse* WrapperServerMessage::unsafe_arena_release_loginresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.loginResponse)
  if (_internal_has_loginresponse()) {
    clear_has_msg();
    ::LoginResponse* temp = msg_.loginresponse_;
    msg_.loginresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_loginresponse(::LoginResponse* loginresponse) {
  clear_msg();
  if (loginresponse) {
    set_has_loginresponse();
    msg_.loginresponse_ = loginresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.loginResponse)
}
inline ::LoginResponse* WrapperServerMessage::_internal_mutable_loginresponse() {
  if (!_internal_has_loginresponse()) {
    clear_msg();
    set_has_loginresponse();
    msg_.loginresponse_ = CreateMaybeMessage< ::LoginResponse >(GetArena());
  }
  return msg_.loginresponse_;
}
inline ::LoginResponse* WrapperServerMessage::mutable_loginresponse() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.loginResponse)
  return _internal_mutable_loginresponse();
}

// .RegularResponse regularResponse = 7;
inline bool WrapperServerMessage::_internal_has_regularresponse() const {
  return msg_case() == kRegularResponse;
}
inline bool WrapperServerMessage::has_regularresponse() const {
  return _internal_has_regularresponse();
}
inline void WrapperServerMessage::set_has_regularresponse() {
  _oneof_case_[0] = kRegularResponse;
}
inline ::RegularResponse* WrapperServerMessage::release_regularresponse() {
  // @@protoc_insertion_point(field_release:WrapperServerMessage.regularResponse)
  if (_internal_has_regularresponse()) {
    clear_has_msg();
      ::RegularResponse* temp = msg_.regularresponse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.regularresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegularResponse& WrapperServerMessage::_internal_regularresponse() const {
  return _internal_has_regularresponse()
      ? *msg_.regularresponse_
      : reinterpret_cast< ::RegularResponse&>(::_RegularResponse_default_instance_);
}
inline const ::RegularResponse& WrapperServerMessage::regularresponse() const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.regularResponse)
  return _internal_regularresponse();
}
inline ::RegularResponse* WrapperServerMessage::unsafe_arena_release_regularresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WrapperServerMessage.regularResponse)
  if (_internal_has_regularresponse()) {
    clear_has_msg();
    ::RegularResponse* temp = msg_.regularresponse_;
    msg_.regularresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrapperServerMessage::unsafe_arena_set_allocated_regularresponse(::RegularResponse* regularresponse) {
  clear_msg();
  if (regularresponse) {
    set_has_regularresponse();
    msg_.regularresponse_ = regularresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WrapperServerMessage.regularResponse)
}
inline ::RegularResponse* WrapperServerMessage::_internal_mutable_regularresponse() {
  if (!_internal_has_regularresponse()) {
    clear_msg();
    set_has_regularresponse();
    msg_.regularresponse_ = CreateMaybeMessage< ::RegularResponse >(GetArena());
  }
  return msg_.regularresponse_;
}
inline ::RegularResponse* WrapperServerMessage::mutable_regularresponse() {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.regularResponse)
  return _internal_mutable_regularresponse();
}

// repeated .RoomResponse rooms = 8;
inline int WrapperServerMessage::_internal_rooms_size() const {
  return rooms_.size();
}
inline int WrapperServerMessage::rooms_size() const {
  return _internal_rooms_size();
}
inline ::RoomResponse* WrapperServerMessage::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:WrapperServerMessage.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomResponse >*
WrapperServerMessage::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:WrapperServerMessage.rooms)
  return &rooms_;
}
inline const ::RoomResponse& WrapperServerMessage::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::RoomResponse& WrapperServerMessage::rooms(int index) const {
  // @@protoc_insertion_point(field_get:WrapperServerMessage.rooms)
  return _internal_rooms(index);
}
inline ::RoomResponse* WrapperServerMessage::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::RoomResponse* WrapperServerMessage::add_rooms() {
  // @@protoc_insertion_point(field_add:WrapperServerMessage.rooms)
  return _internal_add_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomResponse >&
WrapperServerMessage::rooms() const {
  // @@protoc_insertion_point(field_list:WrapperServerMessage.rooms)
  return rooms_;
}

inline bool WrapperServerMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void WrapperServerMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline WrapperServerMessage::MsgCase WrapperServerMessage::msg_case() const {
  return WrapperServerMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto
