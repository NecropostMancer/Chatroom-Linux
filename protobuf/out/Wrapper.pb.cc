// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wrapper.proto

#include "Wrapper.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr WrapperClientMessage::WrapperClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_(0)
  , _oneof_case_{}{}
struct WrapperClientMessageDefaultTypeInternal {
  constexpr WrapperClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WrapperClientMessageDefaultTypeInternal() {}
  union {
    WrapperClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WrapperClientMessageDefaultTypeInternal _WrapperClientMessage_default_instance_;
constexpr WrapperServerMessage::WrapperServerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_(0)
  , _oneof_case_{}{}
struct WrapperServerMessageDefaultTypeInternal {
  constexpr WrapperServerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WrapperServerMessageDefaultTypeInternal() {}
  union {
    WrapperServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WrapperServerMessageDefaultTypeInternal _WrapperServerMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Wrapper_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Wrapper_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Wrapper_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Wrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WrapperClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WrapperClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WrapperClientMessage, test_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WrapperClientMessage, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WrapperServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WrapperServerMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WrapperServerMessage, test_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WrapperServerMessage, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WrapperClientMessage)},
  { 14, -1, sizeof(::WrapperServerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WrapperClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WrapperServerMessage_default_instance_),
};

const char descriptor_table_protodef_Wrapper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rWrapper.proto\032\013Error.proto\032\nRoom.proto"
  "\032\nChat.proto\032\nUser.proto\"\306\002\n\024WrapperClie"
  "ntMessage\022\014\n\004test\030\001 \001(\005\0221\n\022chatMessageRe"
  "quest\030\002 \001(\0132\023.ChatMessageRequestH\000\022\027\n\005er"
  "ror\030\003 \001(\0132\006.ErrorH\000\022%\n\014loginRequest\030\004 \001("
  "\0132\r.LoginRequestH\000\022+\n\017registerRequest\030\005 "
  "\001(\0132\020.RegisterRequestH\000\022/\n\021changeNameReq"
  "uest\030\006 \001(\0132\022.ChangeNameRequestH\000\022#\n\013room"
  "Request\030\007 \001(\0132\014.RoomRequestH\000\022#\n\013roomCon"
  "trol\030\010 \001(\0132\014.RoomControlH\000B\005\n\003msg\"\225\002\n\024Wr"
  "apperServerMessage\022\014\n\004test\030\001 \001(\005\022%\n\014room"
  "Response\030\002 \001(\0132\r.RoomResponseH\000\022\027\n\005error"
  "\030\003 \001(\0132\006.ErrorH\000\022+\n\017chatMessageSend\030\004 \001("
  "\0132\020.ChatMessageSendH\000\022%\n\014chatResponse\030\005 "
  "\001(\0132\r.ChatResponseH\000\022\'\n\rloginResponse\030\006 "
  "\001(\0132\016.LoginResponseH\000\022+\n\017regularResponse"
  "\030\007 \001(\0132\020.RegularResponseH\000B\005\n\003msgb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Wrapper_2eproto_deps[4] = {
  &::descriptor_table_Chat_2eproto,
  &::descriptor_table_Error_2eproto,
  &::descriptor_table_Room_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Wrapper_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wrapper_2eproto = {
  false, false, 681, descriptor_table_protodef_Wrapper_2eproto, "Wrapper.proto", 
  &descriptor_table_Wrapper_2eproto_once, descriptor_table_Wrapper_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_Wrapper_2eproto::offsets,
  file_level_metadata_Wrapper_2eproto, file_level_enum_descriptors_Wrapper_2eproto, file_level_service_descriptors_Wrapper_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Wrapper_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Wrapper_2eproto);
  return descriptor_table_Wrapper_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Wrapper_2eproto(&descriptor_table_Wrapper_2eproto);

// ===================================================================

class WrapperClientMessage::_Internal {
 public:
  static const ::ChatMessageRequest& chatmessagerequest(const WrapperClientMessage* msg);
  static const ::Error& error(const WrapperClientMessage* msg);
  static const ::LoginRequest& loginrequest(const WrapperClientMessage* msg);
  static const ::RegisterRequest& registerrequest(const WrapperClientMessage* msg);
  static const ::ChangeNameRequest& changenamerequest(const WrapperClientMessage* msg);
  static const ::RoomRequest& roomrequest(const WrapperClientMessage* msg);
  static const ::RoomControl& roomcontrol(const WrapperClientMessage* msg);
};

const ::ChatMessageRequest&
WrapperClientMessage::_Internal::chatmessagerequest(const WrapperClientMessage* msg) {
  return *msg->msg_.chatmessagerequest_;
}
const ::Error&
WrapperClientMessage::_Internal::error(const WrapperClientMessage* msg) {
  return *msg->msg_.error_;
}
const ::LoginRequest&
WrapperClientMessage::_Internal::loginrequest(const WrapperClientMessage* msg) {
  return *msg->msg_.loginrequest_;
}
const ::RegisterRequest&
WrapperClientMessage::_Internal::registerrequest(const WrapperClientMessage* msg) {
  return *msg->msg_.registerrequest_;
}
const ::ChangeNameRequest&
WrapperClientMessage::_Internal::changenamerequest(const WrapperClientMessage* msg) {
  return *msg->msg_.changenamerequest_;
}
const ::RoomRequest&
WrapperClientMessage::_Internal::roomrequest(const WrapperClientMessage* msg) {
  return *msg->msg_.roomrequest_;
}
const ::RoomControl&
WrapperClientMessage::_Internal::roomcontrol(const WrapperClientMessage* msg) {
  return *msg->msg_.roomcontrol_;
}
void WrapperClientMessage::set_allocated_chatmessagerequest(::ChatMessageRequest* chatmessagerequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (chatmessagerequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmessagerequest)->GetArena();
    if (message_arena != submessage_arena) {
      chatmessagerequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmessagerequest, submessage_arena);
    }
    set_has_chatmessagerequest();
    msg_.chatmessagerequest_ = chatmessagerequest;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.chatMessageRequest)
}
void WrapperClientMessage::clear_chatmessagerequest() {
  if (_internal_has_chatmessagerequest()) {
    if (GetArena() == nullptr) {
      delete msg_.chatmessagerequest_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_error(::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.error)
}
void WrapperClientMessage::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete msg_.error_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_loginrequest(::LoginRequest* loginrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (loginrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginrequest)->GetArena();
    if (message_arena != submessage_arena) {
      loginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginrequest, submessage_arena);
    }
    set_has_loginrequest();
    msg_.loginrequest_ = loginrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.loginRequest)
}
void WrapperClientMessage::clear_loginrequest() {
  if (_internal_has_loginrequest()) {
    if (GetArena() == nullptr) {
      delete msg_.loginrequest_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_registerrequest(::RegisterRequest* registerrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (registerrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registerrequest)->GetArena();
    if (message_arena != submessage_arena) {
      registerrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerrequest, submessage_arena);
    }
    set_has_registerrequest();
    msg_.registerrequest_ = registerrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.registerRequest)
}
void WrapperClientMessage::clear_registerrequest() {
  if (_internal_has_registerrequest()) {
    if (GetArena() == nullptr) {
      delete msg_.registerrequest_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_changenamerequest(::ChangeNameRequest* changenamerequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (changenamerequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changenamerequest)->GetArena();
    if (message_arena != submessage_arena) {
      changenamerequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changenamerequest, submessage_arena);
    }
    set_has_changenamerequest();
    msg_.changenamerequest_ = changenamerequest;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.changeNameRequest)
}
void WrapperClientMessage::clear_changenamerequest() {
  if (_internal_has_changenamerequest()) {
    if (GetArena() == nullptr) {
      delete msg_.changenamerequest_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_roomrequest(::RoomRequest* roomrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (roomrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomrequest)->GetArena();
    if (message_arena != submessage_arena) {
      roomrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomrequest, submessage_arena);
    }
    set_has_roomrequest();
    msg_.roomrequest_ = roomrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.roomRequest)
}
void WrapperClientMessage::clear_roomrequest() {
  if (_internal_has_roomrequest()) {
    if (GetArena() == nullptr) {
      delete msg_.roomrequest_;
    }
    clear_has_msg();
  }
}
void WrapperClientMessage::set_allocated_roomcontrol(::RoomControl* roomcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (roomcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomcontrol)->GetArena();
    if (message_arena != submessage_arena) {
      roomcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomcontrol, submessage_arena);
    }
    set_has_roomcontrol();
    msg_.roomcontrol_ = roomcontrol;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperClientMessage.roomControl)
}
void WrapperClientMessage::clear_roomcontrol() {
  if (_internal_has_roomcontrol()) {
    if (GetArena() == nullptr) {
      delete msg_.roomcontrol_;
    }
    clear_has_msg();
  }
}
WrapperClientMessage::WrapperClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WrapperClientMessage)
}
WrapperClientMessage::WrapperClientMessage(const WrapperClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kChatMessageRequest: {
      _internal_mutable_chatmessagerequest()->::ChatMessageRequest::MergeFrom(from._internal_chatmessagerequest());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Error::MergeFrom(from._internal_error());
      break;
    }
    case kLoginRequest: {
      _internal_mutable_loginrequest()->::LoginRequest::MergeFrom(from._internal_loginrequest());
      break;
    }
    case kRegisterRequest: {
      _internal_mutable_registerrequest()->::RegisterRequest::MergeFrom(from._internal_registerrequest());
      break;
    }
    case kChangeNameRequest: {
      _internal_mutable_changenamerequest()->::ChangeNameRequest::MergeFrom(from._internal_changenamerequest());
      break;
    }
    case kRoomRequest: {
      _internal_mutable_roomrequest()->::RoomRequest::MergeFrom(from._internal_roomrequest());
      break;
    }
    case kRoomControl: {
      _internal_mutable_roomcontrol()->::RoomControl::MergeFrom(from._internal_roomcontrol());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WrapperClientMessage)
}

void WrapperClientMessage::SharedCtor() {
test_ = 0;
clear_has_msg();
}

WrapperClientMessage::~WrapperClientMessage() {
  // @@protoc_insertion_point(destructor:WrapperClientMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void WrapperClientMessage::ArenaDtor(void* object) {
  WrapperClientMessage* _this = reinterpret_cast< WrapperClientMessage* >(object);
  (void)_this;
}
void WrapperClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WrapperClientMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:WrapperClientMessage)
  switch (msg_case()) {
    case kChatMessageRequest: {
      if (GetArena() == nullptr) {
        delete msg_.chatmessagerequest_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete msg_.error_;
      }
      break;
    }
    case kLoginRequest: {
      if (GetArena() == nullptr) {
        delete msg_.loginrequest_;
      }
      break;
    }
    case kRegisterRequest: {
      if (GetArena() == nullptr) {
        delete msg_.registerrequest_;
      }
      break;
    }
    case kChangeNameRequest: {
      if (GetArena() == nullptr) {
        delete msg_.changenamerequest_;
      }
      break;
    }
    case kRoomRequest: {
      if (GetArena() == nullptr) {
        delete msg_.roomrequest_;
      }
      break;
    }
    case kRoomControl: {
      if (GetArena() == nullptr) {
        delete msg_.roomcontrol_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void WrapperClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WrapperClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChatMessageRequest chatMessageRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessagerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LoginRequest loginRequest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RegisterRequest registerRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChangeNameRequest changeNameRequest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_changenamerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomRequest roomRequest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomControl roomControl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomcontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WrapperClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 test = 1;
  if (this->test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test(), target);
  }

  // .ChatMessageRequest chatMessageRequest = 2;
  if (_internal_has_chatmessagerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chatmessagerequest(this), target, stream);
  }

  // .Error error = 3;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // .LoginRequest loginRequest = 4;
  if (_internal_has_loginrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::loginrequest(this), target, stream);
  }

  // .RegisterRequest registerRequest = 5;
  if (_internal_has_registerrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::registerrequest(this), target, stream);
  }

  // .ChangeNameRequest changeNameRequest = 6;
  if (_internal_has_changenamerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::changenamerequest(this), target, stream);
  }

  // .RoomRequest roomRequest = 7;
  if (_internal_has_roomrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::roomrequest(this), target, stream);
  }

  // .RoomControl roomControl = 8;
  if (_internal_has_roomcontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::roomcontrol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WrapperClientMessage)
  return target;
}

size_t WrapperClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WrapperClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 test = 1;
  if (this->test() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test());
  }

  switch (msg_case()) {
    // .ChatMessageRequest chatMessageRequest = 2;
    case kChatMessageRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.chatmessagerequest_);
      break;
    }
    // .Error error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.error_);
      break;
    }
    // .LoginRequest loginRequest = 4;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.loginrequest_);
      break;
    }
    // .RegisterRequest registerRequest = 5;
    case kRegisterRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.registerrequest_);
      break;
    }
    // .ChangeNameRequest changeNameRequest = 6;
    case kChangeNameRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.changenamerequest_);
      break;
    }
    // .RoomRequest roomRequest = 7;
    case kRoomRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.roomrequest_);
      break;
    }
    // .RoomControl roomControl = 8;
    case kRoomControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.roomcontrol_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WrapperClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WrapperClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WrapperClientMessage)
    MergeFrom(*source);
  }
}

void WrapperClientMessage::MergeFrom(const WrapperClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WrapperClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test() != 0) {
    _internal_set_test(from._internal_test());
  }
  switch (from.msg_case()) {
    case kChatMessageRequest: {
      _internal_mutable_chatmessagerequest()->::ChatMessageRequest::MergeFrom(from._internal_chatmessagerequest());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Error::MergeFrom(from._internal_error());
      break;
    }
    case kLoginRequest: {
      _internal_mutable_loginrequest()->::LoginRequest::MergeFrom(from._internal_loginrequest());
      break;
    }
    case kRegisterRequest: {
      _internal_mutable_registerrequest()->::RegisterRequest::MergeFrom(from._internal_registerrequest());
      break;
    }
    case kChangeNameRequest: {
      _internal_mutable_changenamerequest()->::ChangeNameRequest::MergeFrom(from._internal_changenamerequest());
      break;
    }
    case kRoomRequest: {
      _internal_mutable_roomrequest()->::RoomRequest::MergeFrom(from._internal_roomrequest());
      break;
    }
    case kRoomControl: {
      _internal_mutable_roomcontrol()->::RoomControl::MergeFrom(from._internal_roomcontrol());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void WrapperClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WrapperClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperClientMessage::CopyFrom(const WrapperClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WrapperClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperClientMessage::IsInitialized() const {
  return true;
}

void WrapperClientMessage::InternalSwap(WrapperClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WrapperServerMessage::_Internal {
 public:
  static const ::RoomResponse& roomresponse(const WrapperServerMessage* msg);
  static const ::Error& error(const WrapperServerMessage* msg);
  static const ::ChatMessageSend& chatmessagesend(const WrapperServerMessage* msg);
  static const ::ChatResponse& chatresponse(const WrapperServerMessage* msg);
  static const ::LoginResponse& loginresponse(const WrapperServerMessage* msg);
  static const ::RegularResponse& regularresponse(const WrapperServerMessage* msg);
};

const ::RoomResponse&
WrapperServerMessage::_Internal::roomresponse(const WrapperServerMessage* msg) {
  return *msg->msg_.roomresponse_;
}
const ::Error&
WrapperServerMessage::_Internal::error(const WrapperServerMessage* msg) {
  return *msg->msg_.error_;
}
const ::ChatMessageSend&
WrapperServerMessage::_Internal::chatmessagesend(const WrapperServerMessage* msg) {
  return *msg->msg_.chatmessagesend_;
}
const ::ChatResponse&
WrapperServerMessage::_Internal::chatresponse(const WrapperServerMessage* msg) {
  return *msg->msg_.chatresponse_;
}
const ::LoginResponse&
WrapperServerMessage::_Internal::loginresponse(const WrapperServerMessage* msg) {
  return *msg->msg_.loginresponse_;
}
const ::RegularResponse&
WrapperServerMessage::_Internal::regularresponse(const WrapperServerMessage* msg) {
  return *msg->msg_.regularresponse_;
}
void WrapperServerMessage::set_allocated_roomresponse(::RoomResponse* roomresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (roomresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomresponse)->GetArena();
    if (message_arena != submessage_arena) {
      roomresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomresponse, submessage_arena);
    }
    set_has_roomresponse();
    msg_.roomresponse_ = roomresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.roomResponse)
}
void WrapperServerMessage::clear_roomresponse() {
  if (_internal_has_roomresponse()) {
    if (GetArena() == nullptr) {
      delete msg_.roomresponse_;
    }
    clear_has_msg();
  }
}
void WrapperServerMessage::set_allocated_error(::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.error)
}
void WrapperServerMessage::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete msg_.error_;
    }
    clear_has_msg();
  }
}
void WrapperServerMessage::set_allocated_chatmessagesend(::ChatMessageSend* chatmessagesend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (chatmessagesend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmessagesend)->GetArena();
    if (message_arena != submessage_arena) {
      chatmessagesend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmessagesend, submessage_arena);
    }
    set_has_chatmessagesend();
    msg_.chatmessagesend_ = chatmessagesend;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.chatMessageSend)
}
void WrapperServerMessage::clear_chatmessagesend() {
  if (_internal_has_chatmessagesend()) {
    if (GetArena() == nullptr) {
      delete msg_.chatmessagesend_;
    }
    clear_has_msg();
  }
}
void WrapperServerMessage::set_allocated_chatresponse(::ChatResponse* chatresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (chatresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatresponse)->GetArena();
    if (message_arena != submessage_arena) {
      chatresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatresponse, submessage_arena);
    }
    set_has_chatresponse();
    msg_.chatresponse_ = chatresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.chatResponse)
}
void WrapperServerMessage::clear_chatresponse() {
  if (_internal_has_chatresponse()) {
    if (GetArena() == nullptr) {
      delete msg_.chatresponse_;
    }
    clear_has_msg();
  }
}
void WrapperServerMessage::set_allocated_loginresponse(::LoginResponse* loginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (loginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginresponse)->GetArena();
    if (message_arena != submessage_arena) {
      loginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresponse, submessage_arena);
    }
    set_has_loginresponse();
    msg_.loginresponse_ = loginresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.loginResponse)
}
void WrapperServerMessage::clear_loginresponse() {
  if (_internal_has_loginresponse()) {
    if (GetArena() == nullptr) {
      delete msg_.loginresponse_;
    }
    clear_has_msg();
  }
}
void WrapperServerMessage::set_allocated_regularresponse(::RegularResponse* regularresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (regularresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regularresponse)->GetArena();
    if (message_arena != submessage_arena) {
      regularresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regularresponse, submessage_arena);
    }
    set_has_regularresponse();
    msg_.regularresponse_ = regularresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:WrapperServerMessage.regularResponse)
}
void WrapperServerMessage::clear_regularresponse() {
  if (_internal_has_regularresponse()) {
    if (GetArena() == nullptr) {
      delete msg_.regularresponse_;
    }
    clear_has_msg();
  }
}
WrapperServerMessage::WrapperServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WrapperServerMessage)
}
WrapperServerMessage::WrapperServerMessage(const WrapperServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kRoomResponse: {
      _internal_mutable_roomresponse()->::RoomResponse::MergeFrom(from._internal_roomresponse());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Error::MergeFrom(from._internal_error());
      break;
    }
    case kChatMessageSend: {
      _internal_mutable_chatmessagesend()->::ChatMessageSend::MergeFrom(from._internal_chatmessagesend());
      break;
    }
    case kChatResponse: {
      _internal_mutable_chatresponse()->::ChatResponse::MergeFrom(from._internal_chatresponse());
      break;
    }
    case kLoginResponse: {
      _internal_mutable_loginresponse()->::LoginResponse::MergeFrom(from._internal_loginresponse());
      break;
    }
    case kRegularResponse: {
      _internal_mutable_regularresponse()->::RegularResponse::MergeFrom(from._internal_regularresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WrapperServerMessage)
}

void WrapperServerMessage::SharedCtor() {
test_ = 0;
clear_has_msg();
}

WrapperServerMessage::~WrapperServerMessage() {
  // @@protoc_insertion_point(destructor:WrapperServerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void WrapperServerMessage::ArenaDtor(void* object) {
  WrapperServerMessage* _this = reinterpret_cast< WrapperServerMessage* >(object);
  (void)_this;
}
void WrapperServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WrapperServerMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:WrapperServerMessage)
  switch (msg_case()) {
    case kRoomResponse: {
      if (GetArena() == nullptr) {
        delete msg_.roomresponse_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete msg_.error_;
      }
      break;
    }
    case kChatMessageSend: {
      if (GetArena() == nullptr) {
        delete msg_.chatmessagesend_;
      }
      break;
    }
    case kChatResponse: {
      if (GetArena() == nullptr) {
        delete msg_.chatresponse_;
      }
      break;
    }
    case kLoginResponse: {
      if (GetArena() == nullptr) {
        delete msg_.loginresponse_;
      }
      break;
    }
    case kRegularResponse: {
      if (GetArena() == nullptr) {
        delete msg_.regularresponse_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void WrapperServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WrapperServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoomResponse roomResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChatMessageSend chatMessageSend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessagesend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChatResponse chatResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LoginResponse loginResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RegularResponse regularResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_regularresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WrapperServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 test = 1;
  if (this->test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test(), target);
  }

  // .RoomResponse roomResponse = 2;
  if (_internal_has_roomresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roomresponse(this), target, stream);
  }

  // .Error error = 3;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // .ChatMessageSend chatMessageSend = 4;
  if (_internal_has_chatmessagesend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chatmessagesend(this), target, stream);
  }

  // .ChatResponse chatResponse = 5;
  if (_internal_has_chatresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chatresponse(this), target, stream);
  }

  // .LoginResponse loginResponse = 6;
  if (_internal_has_loginresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::loginresponse(this), target, stream);
  }

  // .RegularResponse regularResponse = 7;
  if (_internal_has_regularresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::regularresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WrapperServerMessage)
  return target;
}

size_t WrapperServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WrapperServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 test = 1;
  if (this->test() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test());
  }

  switch (msg_case()) {
    // .RoomResponse roomResponse = 2;
    case kRoomResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.roomresponse_);
      break;
    }
    // .Error error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.error_);
      break;
    }
    // .ChatMessageSend chatMessageSend = 4;
    case kChatMessageSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.chatmessagesend_);
      break;
    }
    // .ChatResponse chatResponse = 5;
    case kChatResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.chatresponse_);
      break;
    }
    // .LoginResponse loginResponse = 6;
    case kLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.loginresponse_);
      break;
    }
    // .RegularResponse regularResponse = 7;
    case kRegularResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.regularresponse_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WrapperServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WrapperServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WrapperServerMessage)
    MergeFrom(*source);
  }
}

void WrapperServerMessage::MergeFrom(const WrapperServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WrapperServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test() != 0) {
    _internal_set_test(from._internal_test());
  }
  switch (from.msg_case()) {
    case kRoomResponse: {
      _internal_mutable_roomresponse()->::RoomResponse::MergeFrom(from._internal_roomresponse());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Error::MergeFrom(from._internal_error());
      break;
    }
    case kChatMessageSend: {
      _internal_mutable_chatmessagesend()->::ChatMessageSend::MergeFrom(from._internal_chatmessagesend());
      break;
    }
    case kChatResponse: {
      _internal_mutable_chatresponse()->::ChatResponse::MergeFrom(from._internal_chatresponse());
      break;
    }
    case kLoginResponse: {
      _internal_mutable_loginresponse()->::LoginResponse::MergeFrom(from._internal_loginresponse());
      break;
    }
    case kRegularResponse: {
      _internal_mutable_regularresponse()->::RegularResponse::MergeFrom(from._internal_regularresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void WrapperServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WrapperServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperServerMessage::CopyFrom(const WrapperServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WrapperServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperServerMessage::IsInitialized() const {
  return true;
}

void WrapperServerMessage::InternalSwap(WrapperServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WrapperClientMessage* Arena::CreateMaybeMessage< ::WrapperClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WrapperClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::WrapperServerMessage* Arena::CreateMaybeMessage< ::WrapperServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WrapperServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
