// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Room_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Room_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Room_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Room_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Room_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Room_2eproto_metadata_getter(int index);
class RoomControl;
struct RoomControlDefaultTypeInternal;
extern RoomControlDefaultTypeInternal _RoomControl_default_instance_;
class RoomRequest;
struct RoomRequestDefaultTypeInternal;
extern RoomRequestDefaultTypeInternal _RoomRequest_default_instance_;
class RoomResponse;
struct RoomResponseDefaultTypeInternal;
extern RoomResponseDefaultTypeInternal _RoomResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RoomControl* Arena::CreateMaybeMessage<::RoomControl>(Arena*);
template<> ::RoomRequest* Arena::CreateMaybeMessage<::RoomRequest>(Arena*);
template<> ::RoomResponse* Arena::CreateMaybeMessage<::RoomResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RoomRequest_Operation : int {
  RoomRequest_Operation_CREATE = 0,
  RoomRequest_Operation_JOIN = 1,
  RoomRequest_Operation_LEAVE = 2,
  RoomRequest_Operation_QUERY = 3,
  RoomRequest_Operation_RoomRequest_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoomRequest_Operation_RoomRequest_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoomRequest_Operation_IsValid(int value);
constexpr RoomRequest_Operation RoomRequest_Operation_Operation_MIN = RoomRequest_Operation_CREATE;
constexpr RoomRequest_Operation RoomRequest_Operation_Operation_MAX = RoomRequest_Operation_QUERY;
constexpr int RoomRequest_Operation_Operation_ARRAYSIZE = RoomRequest_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomRequest_Operation_descriptor();
template<typename T>
inline const std::string& RoomRequest_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomRequest_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomRequest_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomRequest_Operation_descriptor(), enum_t_value);
}
inline bool RoomRequest_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomRequest_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomRequest_Operation>(
    RoomRequest_Operation_descriptor(), name, value);
}
enum RoomControl_Operation : int {
  RoomControl_Operation_LOCK = 0,
  RoomControl_Operation_UNLOCK = 1,
  RoomControl_Operation_KICK = 2,
  RoomControl_Operation_PROMOTE = 3,
  RoomControl_Operation_RoomControl_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoomControl_Operation_RoomControl_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoomControl_Operation_IsValid(int value);
constexpr RoomControl_Operation RoomControl_Operation_Operation_MIN = RoomControl_Operation_LOCK;
constexpr RoomControl_Operation RoomControl_Operation_Operation_MAX = RoomControl_Operation_PROMOTE;
constexpr int RoomControl_Operation_Operation_ARRAYSIZE = RoomControl_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomControl_Operation_descriptor();
template<typename T>
inline const std::string& RoomControl_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomControl_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomControl_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomControl_Operation_descriptor(), enum_t_value);
}
inline bool RoomControl_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomControl_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomControl_Operation>(
    RoomControl_Operation_descriptor(), name, value);
}
// ===================================================================

class RoomRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomRequest) */ {
 public:
  inline RoomRequest() : RoomRequest(nullptr) {}
  virtual ~RoomRequest();
  explicit constexpr RoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomRequest(const RoomRequest& from);
  RoomRequest(RoomRequest&& from) noexcept
    : RoomRequest() {
    *this = ::std::move(from);
  }

  inline RoomRequest& operator=(const RoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomRequest& operator=(RoomRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomRequest* internal_default_instance() {
    return reinterpret_cast<const RoomRequest*>(
               &_RoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomRequest& a, RoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomRequest* New() const final {
    return CreateMaybeMessage<RoomRequest>(nullptr);
  }

  RoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomRequest& from);
  void MergeFrom(const RoomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomRequest";
  }
  protected:
  explicit RoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Room_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoomRequest_Operation Operation;
  static constexpr Operation CREATE =
    RoomRequest_Operation_CREATE;
  static constexpr Operation JOIN =
    RoomRequest_Operation_JOIN;
  static constexpr Operation LEAVE =
    RoomRequest_Operation_LEAVE;
  static constexpr Operation QUERY =
    RoomRequest_Operation_QUERY;
  static inline bool Operation_IsValid(int value) {
    return RoomRequest_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    RoomRequest_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    RoomRequest_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    RoomRequest_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return RoomRequest_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return RoomRequest_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return RoomRequest_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPayloadFieldNumber = 4,
    kRoomidFieldNumber = 1,
    kOperationFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string payload = 4;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .RoomRequest.Operation operation = 3;
  void clear_operation();
  ::RoomRequest_Operation operation() const;
  void set_operation(::RoomRequest_Operation value);
  private:
  ::RoomRequest_Operation _internal_operation() const;
  void _internal_set_operation(::RoomRequest_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:RoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// -------------------------------------------------------------------

class RoomControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomControl) */ {
 public:
  inline RoomControl() : RoomControl(nullptr) {}
  virtual ~RoomControl();
  explicit constexpr RoomControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomControl(const RoomControl& from);
  RoomControl(RoomControl&& from) noexcept
    : RoomControl() {
    *this = ::std::move(from);
  }

  inline RoomControl& operator=(const RoomControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomControl& operator=(RoomControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomControl* internal_default_instance() {
    return reinterpret_cast<const RoomControl*>(
               &_RoomControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomControl& a, RoomControl& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomControl* New() const final {
    return CreateMaybeMessage<RoomControl>(nullptr);
  }

  RoomControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomControl& from);
  void MergeFrom(const RoomControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomControl";
  }
  protected:
  explicit RoomControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Room_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoomControl_Operation Operation;
  static constexpr Operation LOCK =
    RoomControl_Operation_LOCK;
  static constexpr Operation UNLOCK =
    RoomControl_Operation_UNLOCK;
  static constexpr Operation KICK =
    RoomControl_Operation_KICK;
  static constexpr Operation PROMOTE =
    RoomControl_Operation_PROMOTE;
  static inline bool Operation_IsValid(int value) {
    return RoomControl_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    RoomControl_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    RoomControl_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    RoomControl_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return RoomControl_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return RoomControl_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return RoomControl_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPayloadFieldNumber = 4,
    kRoomidFieldNumber = 1,
    kOperationFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string payload = 4;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .RoomControl.Operation operation = 3;
  void clear_operation();
  ::RoomControl_Operation operation() const;
  void set_operation(::RoomControl_Operation value);
  private:
  ::RoomControl_Operation _internal_operation() const;
  void _internal_set_operation(::RoomControl_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:RoomControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// -------------------------------------------------------------------

class RoomResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomResponse) */ {
 public:
  inline RoomResponse() : RoomResponse(nullptr) {}
  virtual ~RoomResponse();
  explicit constexpr RoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomResponse(const RoomResponse& from);
  RoomResponse(RoomResponse&& from) noexcept
    : RoomResponse() {
    *this = ::std::move(from);
  }

  inline RoomResponse& operator=(const RoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomResponse& operator=(RoomResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomResponse* internal_default_instance() {
    return reinterpret_cast<const RoomResponse*>(
               &_RoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomResponse& a, RoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomResponse* New() const final {
    return CreateMaybeMessage<RoomResponse>(nullptr);
  }

  RoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomResponse& from);
  void MergeFrom(const RoomResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomResponse";
  }
  protected:
  explicit RoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Room_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomnameFieldNumber = 3,
    kErrorFieldNumber = 1,
    kRoomidFieldNumber = 2,
  };
  // string roomname = 3;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // .Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Error& error() const;
  ::Error* release_error();
  ::Error* mutable_error();
  void set_allocated_error(::Error* error);
  private:
  const ::Error& _internal_error() const;
  ::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Error* error);
  ::Error* unsafe_arena_release_error();

  // int32 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::Error* error_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomRequest

// int32 roomid = 1;
inline void RoomRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomRequest::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:RoomRequest.roomid)
  return _internal_roomid();
}
inline void RoomRequest::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomRequest::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomRequest.roomid)
}

// string username = 2;
inline void RoomRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RoomRequest::username() const {
  // @@protoc_insertion_point(field_get:RoomRequest.username)
  return _internal_username();
}
inline void RoomRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RoomRequest.username)
}
inline std::string* RoomRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RoomRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RoomRequest::_internal_username() const {
  return username_.Get();
}
inline void RoomRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomRequest.username)
}
inline void RoomRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RoomRequest.username)
}
inline void RoomRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomRequest.username)
}
inline std::string* RoomRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomRequest::release_username() {
  // @@protoc_insertion_point(field_release:RoomRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomRequest.username)
}

// .RoomRequest.Operation operation = 3;
inline void RoomRequest::clear_operation() {
  operation_ = 0;
}
inline ::RoomRequest_Operation RoomRequest::_internal_operation() const {
  return static_cast< ::RoomRequest_Operation >(operation_);
}
inline ::RoomRequest_Operation RoomRequest::operation() const {
  // @@protoc_insertion_point(field_get:RoomRequest.operation)
  return _internal_operation();
}
inline void RoomRequest::_internal_set_operation(::RoomRequest_Operation value) {
  
  operation_ = value;
}
inline void RoomRequest::set_operation(::RoomRequest_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:RoomRequest.operation)
}

// string payload = 4;
inline void RoomRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& RoomRequest::payload() const {
  // @@protoc_insertion_point(field_get:RoomRequest.payload)
  return _internal_payload();
}
inline void RoomRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:RoomRequest.payload)
}
inline std::string* RoomRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:RoomRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& RoomRequest::_internal_payload() const {
  return payload_.Get();
}
inline void RoomRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomRequest.payload)
}
inline void RoomRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RoomRequest.payload)
}
inline void RoomRequest::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomRequest.payload)
}
inline std::string* RoomRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomRequest::release_payload() {
  // @@protoc_insertion_point(field_release:RoomRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomRequest.payload)
}

// -------------------------------------------------------------------

// RoomControl

// int32 roomid = 1;
inline void RoomControl::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomControl::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomControl::roomid() const {
  // @@protoc_insertion_point(field_get:RoomControl.roomid)
  return _internal_roomid();
}
inline void RoomControl::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomControl::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomControl.roomid)
}

// string username = 2;
inline void RoomControl::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RoomControl::username() const {
  // @@protoc_insertion_point(field_get:RoomControl.username)
  return _internal_username();
}
inline void RoomControl::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RoomControl.username)
}
inline std::string* RoomControl::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RoomControl.username)
  return _internal_mutable_username();
}
inline const std::string& RoomControl::_internal_username() const {
  return username_.Get();
}
inline void RoomControl::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomControl::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomControl.username)
}
inline void RoomControl::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RoomControl.username)
}
inline void RoomControl::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomControl.username)
}
inline std::string* RoomControl::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomControl::release_username() {
  // @@protoc_insertion_point(field_release:RoomControl.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomControl::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomControl.username)
}

// .RoomControl.Operation operation = 3;
inline void RoomControl::clear_operation() {
  operation_ = 0;
}
inline ::RoomControl_Operation RoomControl::_internal_operation() const {
  return static_cast< ::RoomControl_Operation >(operation_);
}
inline ::RoomControl_Operation RoomControl::operation() const {
  // @@protoc_insertion_point(field_get:RoomControl.operation)
  return _internal_operation();
}
inline void RoomControl::_internal_set_operation(::RoomControl_Operation value) {
  
  operation_ = value;
}
inline void RoomControl::set_operation(::RoomControl_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:RoomControl.operation)
}

// string payload = 4;
inline void RoomControl::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& RoomControl::payload() const {
  // @@protoc_insertion_point(field_get:RoomControl.payload)
  return _internal_payload();
}
inline void RoomControl::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:RoomControl.payload)
}
inline std::string* RoomControl::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:RoomControl.payload)
  return _internal_mutable_payload();
}
inline const std::string& RoomControl::_internal_payload() const {
  return payload_.Get();
}
inline void RoomControl::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomControl::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomControl.payload)
}
inline void RoomControl::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RoomControl.payload)
}
inline void RoomControl::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomControl.payload)
}
inline std::string* RoomControl::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomControl::release_payload() {
  // @@protoc_insertion_point(field_release:RoomControl.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomControl::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomControl.payload)
}

// -------------------------------------------------------------------

// RoomResponse

// .Error error = 1;
inline bool RoomResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool RoomResponse::has_error() const {
  return _internal_has_error();
}
inline const ::Error& RoomResponse::_internal_error() const {
  const ::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Error&>(
      ::_Error_default_instance_);
}
inline const ::Error& RoomResponse::error() const {
  // @@protoc_insertion_point(field_get:RoomResponse.error)
  return _internal_error();
}
inline void RoomResponse::unsafe_arena_set_allocated_error(
    ::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoomResponse.error)
}
inline ::Error* RoomResponse::release_error() {
  
  ::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Error* RoomResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:RoomResponse.error)
  
  ::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::Error* RoomResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::Error* RoomResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:RoomResponse.error)
  return _internal_mutable_error();
}
inline void RoomResponse::set_allocated_error(::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:RoomResponse.error)
}

// int32 roomid = 2;
inline void RoomResponse::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomResponse::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:RoomResponse.roomid)
  return _internal_roomid();
}
inline void RoomResponse::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomResponse::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomResponse.roomid)
}

// string roomname = 3;
inline void RoomResponse::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& RoomResponse::roomname() const {
  // @@protoc_insertion_point(field_get:RoomResponse.roomname)
  return _internal_roomname();
}
inline void RoomResponse::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:RoomResponse.roomname)
}
inline std::string* RoomResponse::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:RoomResponse.roomname)
  return _internal_mutable_roomname();
}
inline const std::string& RoomResponse::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomResponse::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoomResponse::set_roomname(std::string&& value) {
  
  roomname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoomResponse.roomname)
}
inline void RoomResponse::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RoomResponse.roomname)
}
inline void RoomResponse::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoomResponse.roomname)
}
inline std::string* RoomResponse::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoomResponse::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomResponse.roomname)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomResponse::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoomResponse.roomname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoomRequest_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomRequest_Operation>() {
  return ::RoomRequest_Operation_descriptor();
}
template <> struct is_proto_enum< ::RoomControl_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomControl_Operation>() {
  return ::RoomControl_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Room_2eproto
